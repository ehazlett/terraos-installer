#!/bin/bash
set -e

title="Install Terra"
tmpfile=$(mktemp 2>/dev/null) || tmpfile=/tmp/test$$
tmppass=$(mktemp 2>/dev/null) || tmpfile="/tmp/test$(date +%N)"
tmppassconfirm=$(mktemp 2>/dev/null) || tmpfile="/tmp/test$(date +%N)"
trap "rm -f $tmpfile $tmppass $tmppassconfirm" 0 1 2 5 15

dialog --backtitle "$APP_TITLE" --title "$title" --inputbox "Enter system disk: " \
	10 60 /dev/vda 2> $tmpfile

dialog --backtitle "$APP_TITLE" --title "$title" --defaultno --yesno "This will destroy all data on the disk.  Continue?" 5 60

if [[ $? -eq 0 ]]; then
    # prompt for encryption pass
    while true; do
        dialog --backtitle "$APP_TITLE" --title "$title" --passwordbox "Enter system encryption passphrase (blank to disable): " 10 60 2> $tmppass
        # break on blank
        if [ -z "$(cat $tmppass)" ]; then
            break
        fi
        dialog --backtitle "$APP_TITLE" --title "$title" --passwordbox "Enter system encryption passphrase (confirm): " 10 60 2> $tmppassconfirm
        pass=$(cat $tmppass)
        passconfirm=$(cat $tmppassconfirm)
        if [ "${pass}" = "${passconfirm}" ]; then
            break
        fi
        dialog --backtitle "$APP_TITLE" --title "$title" --msgbox "Passwords do not match.  Try again." 6 60
    done
    disk=$(cat $tmpfile)
    encrypt="1"
    if [ -z "$pass"]; then
        encrypt=""
    fi
    echo "starting installation to ${disk}" >> ${LOG}
    # apk
    (
        cat <<EOF
XXX
10

Configuring installation environment...
XXX
EOF
        echo "setting up mirror ${MIRROR}" >> ${LOG}
        setup-apkrepos "${MIRROR}"
        echo "https://alpine.stellarproject.io/terra" >> /etc/apk/repositories
        apk update >> ${LOG} 2>&1
        # prereqs
        echo "installing prereqs" >> ${LOG}
        apk add \
            cryptsetup \
            zfs \
            zfs-udev \
            zfs-scripts \
            sgdisk \
            efibootmgr \
            zfs-scripts >> ${LOG} 2>&1
        modprobe zfs
        # ntp
        setup-ntp -c busybox >> ${LOG} 2>&1
        # ssh
        setup-sshd -c openssh >> ${LOG} 2>&1
        # disk
        sleep 0.5
        cat <<EOF
XXX
15

Configuring system disk...
XXX
EOF
        # temporarily ignore errors to detect disk
        set +e
        part1=${disk}1
        part2=${disk}2
        echo $disk | grep "nvme"
        if [ $? -eq 0 ]; then
            echo "detected NVME disk" >> ${LOG}
            part1=${disk}p1
            part2=${disk}p2
            nvme="yes"
        fi
        # exit on errors from here on
        set -e

        EFI=""
        if [ -e /sys/firmware/efi/efivars ]; then
            EFI="1"
        fi

        if [ ! -z "$EFI" ]; then
            echo "using EFI boot" >> ${LOG}
            sgdisk -Z ${disk}
            sgdisk -og ${disk}
            sgdisk -n 1:0MiB:512MiB -t 1:EF00 ${disk} >/dev/null 2>&1
            sgdisk -n 2:0:0 -t 2:8300 ${disk} > /dev/null 2>&1
        else
            dd if=/dev/zero of=${disk} bs=1M count=32 >/dev/null 2>&1
            fdisk ${disk} <<EOF
o
n
p
1

+512M
n
p
2


a
1
t
1
b
p
w
q
EOF
        fi
        # wait for disk to settle
        set +e
        echo "waiting for disk to settle" >> ${LOG}
        while true; do
            find /dev | grep ${part1} > /dev/null
            if [ $? -ne 0 ]; then
                sync && partprobe ${disk} && sleep 1 && blockdev --rereadpt ${disk} && sleep 1
                continue
            fi
            find /dev | grep ${part2} > /dev/null
            if [ $? -ne 0 ]; then
                sync && partprobe ${disk} && sleep 1 && blockdev --rereadpt ${disk} && sleep 1
                continue
            fi

            echo "partitions ${part1} and ${part2} detected" >> ${LOG}
            echo "  ${p1}" >> ${LOG}
            echo "  ${p2}" >> ${LOG}
            break
        done
        sleep 5
        set -e
        # format
        mkfs.vfat -F32 ${part1} >> ${LOG} 2>&1
        # encryption if enabled
        target="${part2}"
        if [ ! -z "$encrypt" ]; then
            target="/dev/mapper/system"
            echo "setting up encryption on ${part2}" >> ${LOG}
            encpass=$(cat $tmppass)
            echo -n "$encpass" | cryptsetup luksFormat -q ${part2} -
            echo -n "$encpass" | cryptsetup luksOpen ${part2} system -
        fi
        # zfs
        rc-update add zfs-mount boot
        sleep 0.5
        cat <<EOF
XXX
20

Configuring ZFS...
XXX
EOF
        echo "configuring ZFS for ${target}" >> ${LOG}
        zpool create \
            -o ashift=12 \
            -O normalization=formD \
            -O atime=off \
            -m none \
            -R /mnt \
            -O compression=lz4 \
            tank $target
        zfs create -o mountpoint=none -o canmount=off tank/root
        zfs create -o mountpoint=/ tank/root/terra
        zfs create -o mountpoint=/home tank/home
        # boot
        mkdir -p /mnt/boot
        echo "formatting boot partition ${part1}" >> ${LOG}
        mount -t vfat ${part1} /mnt/boot
        sleep 0.5
        # install base
        echo "installing base system" >> ${LOG}
        cat <<EOF
XXX
30

Installing base system...
XXX
EOF
        # allow errors because on EFI systems the boot setup fails
        (setup-disk -v -m sys /mnt >> ${LOG} 2>&1 || true)
        # efi
        sleep 0.5
        cat <<EOF
XXX
50

Configuring boot...
XXX
EOF
        if [ ! -z "$EFI" ]; then
            echo "configuring /boot for EFI system" >> ${LOG}
            mkdir -p /mnt/boot/EFI/syslinux
            cp -r /mnt/usr/share/syslinux/efi64/* /mnt/boot/EFI/syslinux/
            mv /mnt/boot/extlinux.conf /mnt/boot/EFI/syslinux/extlinux.conf
            sed -i 's/vmlinuz-terra/\/vmlinuz-terra/g' /mnt/boot/EFI/syslinux/extlinux.conf
            sed -i 's/initramfs-terra/\/initramfs-terra/g' /mnt/boot/EFI/syslinux/extlinux.conf
            dd bs=440 count=1 conv=notrunc if=/mnt/usr/share/syslinux/gptmbr.bin of=${disk} >/dev/null 2>&1
            modprobe efivars
            efibootmgr -c -d ${disk} -l '\EFI\syslinux\syslinux.efi' -L terra -p 1 >/dev/null 2>&1
        else
            echo "configuring /boot for BIOS system" >> ${LOG}
            dd bs=440 count=1 conv=notrunc if=/mnt/usr/share/syslinux/mbr.bin of=${disk} >/dev/null 2>&1
        fi
        # crypttab
        if [ ! -z "$encrypt" ]; then
            echo "system ${part2} none luks" > /mnt/etc/crypttab
        fi
        # remove zfs and unneeded mounts from /mnt/etc/fstab
        sleep 0.5
        cat <<EOF
XXX
60

Configuring system...
XXX
EOF
        sed -i '/^tank/d' /mnt/etc/fstab
        sed -i '/cdrom/d' /mnt/etc/fstab
        sed -i '/usbdisk/d' /mnt/etc/fstab
        # append cryptsetup to /mnt/etc/mkinitfs/mkinitfs.conf
        if [ ! -z "$encrypt" ]; then
            sed -i 's/base/base cryptsetup/' /mnt/etc/mkinitfs/mkinitfs.conf
        fi
        if [ ! -z "$nvme" ]; then
            echo "adding NVME support to initfs" >> ${LOG}
            # add nvme to /mnt/etc/mkinitfs/mkinitfs.conf
            sed -i 's/base/base nvme/' /mnt/etc/mkinitfs/mkinitfs.conf
        fi
        # cryptsetup for root
        bootdir="/mnt/boot"
        if [ ! -z "$EFI" ]; then
            bootdir="/mnt/boot/EFI/syslinux"
        fi
        echo "setting up boot directory ${bootdir}" >> ${LOG}
        subpart=$(echo $part2 | sed 's/\//\\\//g')
        if [ ! -z "$encrypt" ]; then
            sed -i 's/\(\APPEND.*\)/\1 cryptroot='"$subpart"' cryptdm=system/g' ${bootdir}/extlinux.conf
        fi
        # bootsplash
        echo "configuring bootsplash ${bootdir}/bg.jpg" >> ${LOG}
        cp -f ${BASE_DIR}/media/bg.jpg ${bootdir}/bg.jpg
        echo "updating boot config ${bootdir}/extlinux.conf" >> ${LOG}
        sed -i 's/DEFAULT.*/DEFAULT vesamenu.c32/' ${bootdir}/extlinux.conf
        sed -i 's/MENU TITLE.*/MENU TITLE Terra OS/' ${bootdir}/extlinux.conf
        sed -i 's/MENU LABEL.*/MENU LABEL Terra/' ${bootdir}/extlinux.conf
        sed -i 's/MENU AUTOBOOT.*/MENU AUTOBOOT Terra OS will boot in # seconds./' ${bootdir}/extlinux.conf
        cat <<EOF>> $bootdir/extlinux.conf
MENU BACKGROUND bg.jpg
MENU RESOLUTION 1024 768
MENU COLOR sel * #1a1a1a1a #dededede none
MENU COLOR border * #dededede #00000000 none
MENU COLOR title * #dededede #00000000 none
MENU COLOR tabmsg * #dededede #00000000 none
EOF
        # motd
        echo "setting motd" >> ${LOG}
        echo "Welcome to TerraOS!" > /mnt/etc/motd
        sleep 0.5
        cat <<EOF
XXX
90

Updating initial ramdisk...
XXX
EOF
        # update initramfs
        echo "updating initfs" >> ${LOG}
        mkinitfs -c /mnt/etc/mkinitfs/mkinitfs.conf -b /mnt $(ls /mnt/lib/modules/)

        # system config

        $SCRIPTDIR/chroot-mount >/dev/null 2>&1
        cat <<EOF > /mnt/tmp/systemconfig
#!/bin/bash
rc-update add udev sysinit
rc-update add udev-trigger sysinit
rc-update add udev-settle sysinit
rc-update add zfs-mount
EOF
        chmod +x /mnt/tmp/systemconfig
        chroot /mnt /tmp/systemconfig
        rm /mnt/tmp/systemconfig
        $SCRIPTDIR/chroot-unmount >/dev/null 2>&1

        cat <<EOF
XXX
100

Installation complete.
XXX
EOF
        echo "installation complete" >> ${LOG}
    ) | dialog --backtitle "$APP_TITLE" --title "Terra Installation" --gauge "Please wait..." 7 70 0
fi

